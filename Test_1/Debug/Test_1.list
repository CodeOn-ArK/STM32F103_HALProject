
Test_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080008cc  080008cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080008cc  080008cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080008cc  080008cc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008cc  080008cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008cc  080008cc  000108cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080008d0  080008d0  000108d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080008d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080008e0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080008e0  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000024bc  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000b06  00000000  00000000  000224f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000340  00000000  00000000  00022ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002c8  00000000  00000000  00023338  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000156c0  00000000  00000000  00023600  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003257  00000000  00000000  00038cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007b2a1  00000000  00000000  0003bf17  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b71b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000af4  00000000  00000000  000b7234  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080008b4 	.word	0x080008b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080008b4 	.word	0x080008b4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f8b0 	bl	80002b4 <HAL_Init>
  MX_GPIO_Init();
 8000154:	f000 f80c 	bl	8000170 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */
	 HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5); //Toggle LED
 8000158:	2120      	movs	r1, #32
 800015a:	4804      	ldr	r0, [pc, #16]	; (800016c <main+0x20>)
 800015c:	f000 fb6c 	bl	8000838 <HAL_GPIO_TogglePin>

	 HAL_Delay(1000); //Delay 1 Seconds
 8000160:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000164:	f000 f908 	bl	8000378 <HAL_Delay>
	 HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5); //Toggle LED
 8000168:	e7f6      	b.n	8000158 <main+0xc>
 800016a:	bf00      	nop
 800016c:	40010800 	.word	0x40010800

08000170 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b086      	sub	sp, #24
 8000174:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000176:	f107 0308 	add.w	r3, r7, #8
 800017a:	2200      	movs	r2, #0
 800017c:	601a      	str	r2, [r3, #0]
 800017e:	605a      	str	r2, [r3, #4]
 8000180:	609a      	str	r2, [r3, #8]
 8000182:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000184:	4b0e      	ldr	r3, [pc, #56]	; (80001c0 <MX_GPIO_Init+0x50>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	4a0d      	ldr	r2, [pc, #52]	; (80001c0 <MX_GPIO_Init+0x50>)
 800018a:	f043 0304 	orr.w	r3, r3, #4
 800018e:	6193      	str	r3, [r2, #24]
 8000190:	4b0b      	ldr	r3, [pc, #44]	; (80001c0 <MX_GPIO_Init+0x50>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	f003 0304 	and.w	r3, r3, #4
 8000198:	607b      	str	r3, [r7, #4]
 800019a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800019c:	2320      	movs	r3, #32
 800019e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001a0:	2301      	movs	r3, #1
 80001a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001a4:	2300      	movs	r3, #0
 80001a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001a8:	2302      	movs	r3, #2
 80001aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001ac:	f107 0308 	add.w	r3, r7, #8
 80001b0:	4619      	mov	r1, r3
 80001b2:	4804      	ldr	r0, [pc, #16]	; (80001c4 <MX_GPIO_Init+0x54>)
 80001b4:	f000 f9e6 	bl	8000584 <HAL_GPIO_Init>

}
 80001b8:	bf00      	nop
 80001ba:	3718      	adds	r7, #24
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	40021000 	.word	0x40021000
 80001c4:	40010800 	.word	0x40010800

080001c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80001ce:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <HAL_MspInit+0x40>)
 80001d0:	699b      	ldr	r3, [r3, #24]
 80001d2:	4a0d      	ldr	r2, [pc, #52]	; (8000208 <HAL_MspInit+0x40>)
 80001d4:	f043 0301 	orr.w	r3, r3, #1
 80001d8:	6193      	str	r3, [r2, #24]
 80001da:	4b0b      	ldr	r3, [pc, #44]	; (8000208 <HAL_MspInit+0x40>)
 80001dc:	699b      	ldr	r3, [r3, #24]
 80001de:	f003 0301 	and.w	r3, r3, #1
 80001e2:	607b      	str	r3, [r7, #4]
 80001e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80001e6:	4b08      	ldr	r3, [pc, #32]	; (8000208 <HAL_MspInit+0x40>)
 80001e8:	69db      	ldr	r3, [r3, #28]
 80001ea:	4a07      	ldr	r2, [pc, #28]	; (8000208 <HAL_MspInit+0x40>)
 80001ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80001f0:	61d3      	str	r3, [r2, #28]
 80001f2:	4b05      	ldr	r3, [pc, #20]	; (8000208 <HAL_MspInit+0x40>)
 80001f4:	69db      	ldr	r3, [r3, #28]
 80001f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80001fa:	603b      	str	r3, [r7, #0]
 80001fc:	683b      	ldr	r3, [r7, #0]
 // __HAL_AFIO_REMAP_SWJ_DISABLE();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	bc80      	pop	{r7}
 8000206:	4770      	bx	lr
 8000208:	40021000 	.word	0x40021000

0800020c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000210:	e7fe      	b.n	8000210 <NMI_Handler+0x4>

08000212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000212:	b480      	push	{r7}
 8000214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000216:	e7fe      	b.n	8000216 <HardFault_Handler+0x4>

08000218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800021c:	e7fe      	b.n	800021c <MemManage_Handler+0x4>

0800021e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800021e:	b480      	push	{r7}
 8000220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000222:	e7fe      	b.n	8000222 <BusFault_Handler+0x4>

08000224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000228:	e7fe      	b.n	8000228 <UsageFault_Handler+0x4>

0800022a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800022a:	b480      	push	{r7}
 800022c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800022e:	bf00      	nop
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr

08000236 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000236:	b480      	push	{r7}
 8000238:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800023a:	bf00      	nop
 800023c:	46bd      	mov	sp, r7
 800023e:	bc80      	pop	{r7}
 8000240:	4770      	bx	lr

08000242 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000242:	b480      	push	{r7}
 8000244:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000246:	bf00      	nop
 8000248:	46bd      	mov	sp, r7
 800024a:	bc80      	pop	{r7}
 800024c:	4770      	bx	lr

0800024e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800024e:	b580      	push	{r7, lr}
 8000250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000252:	f000 f875 	bl	8000340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}

0800025a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800025a:	b480      	push	{r7}
 800025c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800025e:	bf00      	nop
 8000260:	46bd      	mov	sp, r7
 8000262:	bc80      	pop	{r7}
 8000264:	4770      	bx	lr
	...

08000268 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000268:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800026a:	e003      	b.n	8000274 <LoopCopyDataInit>

0800026c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800026c:	4b0b      	ldr	r3, [pc, #44]	; (800029c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800026e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000270:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000272:	3104      	adds	r1, #4

08000274 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000274:	480a      	ldr	r0, [pc, #40]	; (80002a0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000276:	4b0b      	ldr	r3, [pc, #44]	; (80002a4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000278:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800027a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800027c:	d3f6      	bcc.n	800026c <CopyDataInit>
  ldr r2, =_sbss
 800027e:	4a0a      	ldr	r2, [pc, #40]	; (80002a8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000280:	e002      	b.n	8000288 <LoopFillZerobss>

08000282 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000282:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000284:	f842 3b04 	str.w	r3, [r2], #4

08000288 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000288:	4b08      	ldr	r3, [pc, #32]	; (80002ac <LoopFillZerobss+0x24>)
  cmp r2, r3
 800028a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800028c:	d3f9      	bcc.n	8000282 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800028e:	f7ff ffe4 	bl	800025a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000292:	f000 faeb 	bl	800086c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000296:	f7ff ff59 	bl	800014c <main>
  bx lr
 800029a:	4770      	bx	lr
  ldr r3, =_sidata
 800029c:	080008d4 	.word	0x080008d4
  ldr r0, =_sdata
 80002a0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80002a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80002a8:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80002ac:	2000002c 	.word	0x2000002c

080002b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002b0:	e7fe      	b.n	80002b0 <ADC1_2_IRQHandler>
	...

080002b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002b8:	4b08      	ldr	r3, [pc, #32]	; (80002dc <HAL_Init+0x28>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a07      	ldr	r2, [pc, #28]	; (80002dc <HAL_Init+0x28>)
 80002be:	f043 0310 	orr.w	r3, r3, #16
 80002c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002c4:	2003      	movs	r0, #3
 80002c6:	f000 f929 	bl	800051c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80002ca:	2000      	movs	r0, #0
 80002cc:	f000 f808 	bl	80002e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80002d0:	f7ff ff7a 	bl	80001c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80002d4:	2300      	movs	r3, #0
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	40022000 	.word	0x40022000

080002e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80002e8:	4b12      	ldr	r3, [pc, #72]	; (8000334 <HAL_InitTick+0x54>)
 80002ea:	681a      	ldr	r2, [r3, #0]
 80002ec:	4b12      	ldr	r3, [pc, #72]	; (8000338 <HAL_InitTick+0x58>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	4619      	mov	r1, r3
 80002f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80002fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 f933 	bl	800056a <HAL_SYSTICK_Config>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800030a:	2301      	movs	r3, #1
 800030c:	e00e      	b.n	800032c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	2b0f      	cmp	r3, #15
 8000312:	d80a      	bhi.n	800032a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000314:	2200      	movs	r2, #0
 8000316:	6879      	ldr	r1, [r7, #4]
 8000318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800031c:	f000 f909 	bl	8000532 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000320:	4a06      	ldr	r2, [pc, #24]	; (800033c <HAL_InitTick+0x5c>)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000326:	2300      	movs	r3, #0
 8000328:	e000      	b.n	800032c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800032a:	2301      	movs	r3, #1
}
 800032c:	4618      	mov	r0, r3
 800032e:	3708      	adds	r7, #8
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	20000000 	.word	0x20000000
 8000338:	20000008 	.word	0x20000008
 800033c:	20000004 	.word	0x20000004

08000340 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000344:	4b05      	ldr	r3, [pc, #20]	; (800035c <HAL_IncTick+0x1c>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	461a      	mov	r2, r3
 800034a:	4b05      	ldr	r3, [pc, #20]	; (8000360 <HAL_IncTick+0x20>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	4413      	add	r3, r2
 8000350:	4a03      	ldr	r2, [pc, #12]	; (8000360 <HAL_IncTick+0x20>)
 8000352:	6013      	str	r3, [r2, #0]
}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr
 800035c:	20000008 	.word	0x20000008
 8000360:	20000028 	.word	0x20000028

08000364 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  return uwTick;
 8000368:	4b02      	ldr	r3, [pc, #8]	; (8000374 <HAL_GetTick+0x10>)
 800036a:	681b      	ldr	r3, [r3, #0]
}
 800036c:	4618      	mov	r0, r3
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr
 8000374:	20000028 	.word	0x20000028

08000378 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000380:	f7ff fff0 	bl	8000364 <HAL_GetTick>
 8000384:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000390:	d005      	beq.n	800039e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000392:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <HAL_Delay+0x40>)
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	461a      	mov	r2, r3
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	4413      	add	r3, r2
 800039c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800039e:	bf00      	nop
 80003a0:	f7ff ffe0 	bl	8000364 <HAL_GetTick>
 80003a4:	4602      	mov	r2, r0
 80003a6:	68bb      	ldr	r3, [r7, #8]
 80003a8:	1ad3      	subs	r3, r2, r3
 80003aa:	68fa      	ldr	r2, [r7, #12]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d8f7      	bhi.n	80003a0 <HAL_Delay+0x28>
  {
  }
}
 80003b0:	bf00      	nop
 80003b2:	3710      	adds	r7, #16
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	20000008 	.word	0x20000008

080003bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003bc:	b480      	push	{r7}
 80003be:	b085      	sub	sp, #20
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	f003 0307 	and.w	r3, r3, #7
 80003ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003cc:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <__NVIC_SetPriorityGrouping+0x44>)
 80003ce:	68db      	ldr	r3, [r3, #12]
 80003d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003d2:	68ba      	ldr	r2, [r7, #8]
 80003d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80003d8:	4013      	ands	r3, r2
 80003da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003e0:	68bb      	ldr	r3, [r7, #8]
 80003e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80003e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80003e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80003ee:	4a04      	ldr	r2, [pc, #16]	; (8000400 <__NVIC_SetPriorityGrouping+0x44>)
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	60d3      	str	r3, [r2, #12]
}
 80003f4:	bf00      	nop
 80003f6:	3714      	adds	r7, #20
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bc80      	pop	{r7}
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	e000ed00 	.word	0xe000ed00

08000404 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000408:	4b04      	ldr	r3, [pc, #16]	; (800041c <__NVIC_GetPriorityGrouping+0x18>)
 800040a:	68db      	ldr	r3, [r3, #12]
 800040c:	0a1b      	lsrs	r3, r3, #8
 800040e:	f003 0307 	and.w	r3, r3, #7
}
 8000412:	4618      	mov	r0, r3
 8000414:	46bd      	mov	sp, r7
 8000416:	bc80      	pop	{r7}
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	e000ed00 	.word	0xe000ed00

08000420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	4603      	mov	r3, r0
 8000428:	6039      	str	r1, [r7, #0]
 800042a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800042c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000430:	2b00      	cmp	r3, #0
 8000432:	db0a      	blt.n	800044a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	b2da      	uxtb	r2, r3
 8000438:	490c      	ldr	r1, [pc, #48]	; (800046c <__NVIC_SetPriority+0x4c>)
 800043a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800043e:	0112      	lsls	r2, r2, #4
 8000440:	b2d2      	uxtb	r2, r2
 8000442:	440b      	add	r3, r1
 8000444:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000448:	e00a      	b.n	8000460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	b2da      	uxtb	r2, r3
 800044e:	4908      	ldr	r1, [pc, #32]	; (8000470 <__NVIC_SetPriority+0x50>)
 8000450:	79fb      	ldrb	r3, [r7, #7]
 8000452:	f003 030f 	and.w	r3, r3, #15
 8000456:	3b04      	subs	r3, #4
 8000458:	0112      	lsls	r2, r2, #4
 800045a:	b2d2      	uxtb	r2, r2
 800045c:	440b      	add	r3, r1
 800045e:	761a      	strb	r2, [r3, #24]
}
 8000460:	bf00      	nop
 8000462:	370c      	adds	r7, #12
 8000464:	46bd      	mov	sp, r7
 8000466:	bc80      	pop	{r7}
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	e000e100 	.word	0xe000e100
 8000470:	e000ed00 	.word	0xe000ed00

08000474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000474:	b480      	push	{r7}
 8000476:	b089      	sub	sp, #36	; 0x24
 8000478:	af00      	add	r7, sp, #0
 800047a:	60f8      	str	r0, [r7, #12]
 800047c:	60b9      	str	r1, [r7, #8]
 800047e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	f003 0307 	and.w	r3, r3, #7
 8000486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000488:	69fb      	ldr	r3, [r7, #28]
 800048a:	f1c3 0307 	rsb	r3, r3, #7
 800048e:	2b04      	cmp	r3, #4
 8000490:	bf28      	it	cs
 8000492:	2304      	movcs	r3, #4
 8000494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000496:	69fb      	ldr	r3, [r7, #28]
 8000498:	3304      	adds	r3, #4
 800049a:	2b06      	cmp	r3, #6
 800049c:	d902      	bls.n	80004a4 <NVIC_EncodePriority+0x30>
 800049e:	69fb      	ldr	r3, [r7, #28]
 80004a0:	3b03      	subs	r3, #3
 80004a2:	e000      	b.n	80004a6 <NVIC_EncodePriority+0x32>
 80004a4:	2300      	movs	r3, #0
 80004a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80004ac:	69bb      	ldr	r3, [r7, #24]
 80004ae:	fa02 f303 	lsl.w	r3, r2, r3
 80004b2:	43da      	mvns	r2, r3
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	401a      	ands	r2, r3
 80004b8:	697b      	ldr	r3, [r7, #20]
 80004ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80004bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	fa01 f303 	lsl.w	r3, r1, r3
 80004c6:	43d9      	mvns	r1, r3
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004cc:	4313      	orrs	r3, r2
         );
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	3724      	adds	r7, #36	; 0x24
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr

080004d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	3b01      	subs	r3, #1
 80004e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80004e8:	d301      	bcc.n	80004ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80004ea:	2301      	movs	r3, #1
 80004ec:	e00f      	b.n	800050e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004ee:	4a0a      	ldr	r2, [pc, #40]	; (8000518 <SysTick_Config+0x40>)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	3b01      	subs	r3, #1
 80004f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004f6:	210f      	movs	r1, #15
 80004f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80004fc:	f7ff ff90 	bl	8000420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <SysTick_Config+0x40>)
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000506:	4b04      	ldr	r3, [pc, #16]	; (8000518 <SysTick_Config+0x40>)
 8000508:	2207      	movs	r2, #7
 800050a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800050c:	2300      	movs	r3, #0
}
 800050e:	4618      	mov	r0, r3
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	e000e010 	.word	0xe000e010

0800051c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f7ff ff49 	bl	80003bc <__NVIC_SetPriorityGrouping>
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}

08000532 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000532:	b580      	push	{r7, lr}
 8000534:	b086      	sub	sp, #24
 8000536:	af00      	add	r7, sp, #0
 8000538:	4603      	mov	r3, r0
 800053a:	60b9      	str	r1, [r7, #8]
 800053c:	607a      	str	r2, [r7, #4]
 800053e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000540:	2300      	movs	r3, #0
 8000542:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000544:	f7ff ff5e 	bl	8000404 <__NVIC_GetPriorityGrouping>
 8000548:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	68b9      	ldr	r1, [r7, #8]
 800054e:	6978      	ldr	r0, [r7, #20]
 8000550:	f7ff ff90 	bl	8000474 <NVIC_EncodePriority>
 8000554:	4602      	mov	r2, r0
 8000556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800055a:	4611      	mov	r1, r2
 800055c:	4618      	mov	r0, r3
 800055e:	f7ff ff5f 	bl	8000420 <__NVIC_SetPriority>
}
 8000562:	bf00      	nop
 8000564:	3718      	adds	r7, #24
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}

0800056a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800056a:	b580      	push	{r7, lr}
 800056c:	b082      	sub	sp, #8
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000572:	6878      	ldr	r0, [r7, #4]
 8000574:	f7ff ffb0 	bl	80004d8 <SysTick_Config>
 8000578:	4603      	mov	r3, r0
}
 800057a:	4618      	mov	r0, r3
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
	...

08000584 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000584:	b480      	push	{r7}
 8000586:	b08b      	sub	sp, #44	; 0x2c
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800058e:	2300      	movs	r3, #0
 8000590:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000592:	2300      	movs	r3, #0
 8000594:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000596:	e127      	b.n	80007e8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000598:	2201      	movs	r2, #1
 800059a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800059c:	fa02 f303 	lsl.w	r3, r2, r3
 80005a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	69fa      	ldr	r2, [r7, #28]
 80005a8:	4013      	ands	r3, r2
 80005aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80005ac:	69ba      	ldr	r2, [r7, #24]
 80005ae:	69fb      	ldr	r3, [r7, #28]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	f040 8116 	bne.w	80007e2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	685b      	ldr	r3, [r3, #4]
 80005ba:	2b12      	cmp	r3, #18
 80005bc:	d034      	beq.n	8000628 <HAL_GPIO_Init+0xa4>
 80005be:	2b12      	cmp	r3, #18
 80005c0:	d80d      	bhi.n	80005de <HAL_GPIO_Init+0x5a>
 80005c2:	2b02      	cmp	r3, #2
 80005c4:	d02b      	beq.n	800061e <HAL_GPIO_Init+0x9a>
 80005c6:	2b02      	cmp	r3, #2
 80005c8:	d804      	bhi.n	80005d4 <HAL_GPIO_Init+0x50>
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d031      	beq.n	8000632 <HAL_GPIO_Init+0xae>
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d01c      	beq.n	800060c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80005d2:	e048      	b.n	8000666 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80005d4:	2b03      	cmp	r3, #3
 80005d6:	d043      	beq.n	8000660 <HAL_GPIO_Init+0xdc>
 80005d8:	2b11      	cmp	r3, #17
 80005da:	d01b      	beq.n	8000614 <HAL_GPIO_Init+0x90>
          break;
 80005dc:	e043      	b.n	8000666 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80005de:	4a89      	ldr	r2, [pc, #548]	; (8000804 <HAL_GPIO_Init+0x280>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d026      	beq.n	8000632 <HAL_GPIO_Init+0xae>
 80005e4:	4a87      	ldr	r2, [pc, #540]	; (8000804 <HAL_GPIO_Init+0x280>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d806      	bhi.n	80005f8 <HAL_GPIO_Init+0x74>
 80005ea:	4a87      	ldr	r2, [pc, #540]	; (8000808 <HAL_GPIO_Init+0x284>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d020      	beq.n	8000632 <HAL_GPIO_Init+0xae>
 80005f0:	4a86      	ldr	r2, [pc, #536]	; (800080c <HAL_GPIO_Init+0x288>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d01d      	beq.n	8000632 <HAL_GPIO_Init+0xae>
          break;
 80005f6:	e036      	b.n	8000666 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80005f8:	4a85      	ldr	r2, [pc, #532]	; (8000810 <HAL_GPIO_Init+0x28c>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d019      	beq.n	8000632 <HAL_GPIO_Init+0xae>
 80005fe:	4a85      	ldr	r2, [pc, #532]	; (8000814 <HAL_GPIO_Init+0x290>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d016      	beq.n	8000632 <HAL_GPIO_Init+0xae>
 8000604:	4a84      	ldr	r2, [pc, #528]	; (8000818 <HAL_GPIO_Init+0x294>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d013      	beq.n	8000632 <HAL_GPIO_Init+0xae>
          break;
 800060a:	e02c      	b.n	8000666 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	623b      	str	r3, [r7, #32]
          break;
 8000612:	e028      	b.n	8000666 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	3304      	adds	r3, #4
 800061a:	623b      	str	r3, [r7, #32]
          break;
 800061c:	e023      	b.n	8000666 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	68db      	ldr	r3, [r3, #12]
 8000622:	3308      	adds	r3, #8
 8000624:	623b      	str	r3, [r7, #32]
          break;
 8000626:	e01e      	b.n	8000666 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	330c      	adds	r3, #12
 800062e:	623b      	str	r3, [r7, #32]
          break;
 8000630:	e019      	b.n	8000666 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	689b      	ldr	r3, [r3, #8]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d102      	bne.n	8000640 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800063a:	2304      	movs	r3, #4
 800063c:	623b      	str	r3, [r7, #32]
          break;
 800063e:	e012      	b.n	8000666 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	689b      	ldr	r3, [r3, #8]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d105      	bne.n	8000654 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000648:	2308      	movs	r3, #8
 800064a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	69fa      	ldr	r2, [r7, #28]
 8000650:	611a      	str	r2, [r3, #16]
          break;
 8000652:	e008      	b.n	8000666 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000654:	2308      	movs	r3, #8
 8000656:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	69fa      	ldr	r2, [r7, #28]
 800065c:	615a      	str	r2, [r3, #20]
          break;
 800065e:	e002      	b.n	8000666 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000660:	2300      	movs	r3, #0
 8000662:	623b      	str	r3, [r7, #32]
          break;
 8000664:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000666:	69bb      	ldr	r3, [r7, #24]
 8000668:	2bff      	cmp	r3, #255	; 0xff
 800066a:	d801      	bhi.n	8000670 <HAL_GPIO_Init+0xec>
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	e001      	b.n	8000674 <HAL_GPIO_Init+0xf0>
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	3304      	adds	r3, #4
 8000674:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000676:	69bb      	ldr	r3, [r7, #24]
 8000678:	2bff      	cmp	r3, #255	; 0xff
 800067a:	d802      	bhi.n	8000682 <HAL_GPIO_Init+0xfe>
 800067c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	e002      	b.n	8000688 <HAL_GPIO_Init+0x104>
 8000682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000684:	3b08      	subs	r3, #8
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	210f      	movs	r1, #15
 8000690:	693b      	ldr	r3, [r7, #16]
 8000692:	fa01 f303 	lsl.w	r3, r1, r3
 8000696:	43db      	mvns	r3, r3
 8000698:	401a      	ands	r2, r3
 800069a:	6a39      	ldr	r1, [r7, #32]
 800069c:	693b      	ldr	r3, [r7, #16]
 800069e:	fa01 f303 	lsl.w	r3, r1, r3
 80006a2:	431a      	orrs	r2, r3
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	f000 8096 	beq.w	80007e2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80006b6:	4b59      	ldr	r3, [pc, #356]	; (800081c <HAL_GPIO_Init+0x298>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	4a58      	ldr	r2, [pc, #352]	; (800081c <HAL_GPIO_Init+0x298>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6193      	str	r3, [r2, #24]
 80006c2:	4b56      	ldr	r3, [pc, #344]	; (800081c <HAL_GPIO_Init+0x298>)
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80006ce:	4a54      	ldr	r2, [pc, #336]	; (8000820 <HAL_GPIO_Init+0x29c>)
 80006d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d2:	089b      	lsrs	r3, r3, #2
 80006d4:	3302      	adds	r3, #2
 80006d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006da:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80006dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006de:	f003 0303 	and.w	r3, r3, #3
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	220f      	movs	r2, #15
 80006e6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ea:	43db      	mvns	r3, r3
 80006ec:	68fa      	ldr	r2, [r7, #12]
 80006ee:	4013      	ands	r3, r2
 80006f0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a4b      	ldr	r2, [pc, #300]	; (8000824 <HAL_GPIO_Init+0x2a0>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d013      	beq.n	8000722 <HAL_GPIO_Init+0x19e>
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4a4a      	ldr	r2, [pc, #296]	; (8000828 <HAL_GPIO_Init+0x2a4>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d00d      	beq.n	800071e <HAL_GPIO_Init+0x19a>
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4a49      	ldr	r2, [pc, #292]	; (800082c <HAL_GPIO_Init+0x2a8>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d007      	beq.n	800071a <HAL_GPIO_Init+0x196>
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4a48      	ldr	r2, [pc, #288]	; (8000830 <HAL_GPIO_Init+0x2ac>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d101      	bne.n	8000716 <HAL_GPIO_Init+0x192>
 8000712:	2303      	movs	r3, #3
 8000714:	e006      	b.n	8000724 <HAL_GPIO_Init+0x1a0>
 8000716:	2304      	movs	r3, #4
 8000718:	e004      	b.n	8000724 <HAL_GPIO_Init+0x1a0>
 800071a:	2302      	movs	r3, #2
 800071c:	e002      	b.n	8000724 <HAL_GPIO_Init+0x1a0>
 800071e:	2301      	movs	r3, #1
 8000720:	e000      	b.n	8000724 <HAL_GPIO_Init+0x1a0>
 8000722:	2300      	movs	r3, #0
 8000724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000726:	f002 0203 	and.w	r2, r2, #3
 800072a:	0092      	lsls	r2, r2, #2
 800072c:	4093      	lsls	r3, r2
 800072e:	68fa      	ldr	r2, [r7, #12]
 8000730:	4313      	orrs	r3, r2
 8000732:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000734:	493a      	ldr	r1, [pc, #232]	; (8000820 <HAL_GPIO_Init+0x29c>)
 8000736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000738:	089b      	lsrs	r3, r3, #2
 800073a:	3302      	adds	r3, #2
 800073c:	68fa      	ldr	r2, [r7, #12]
 800073e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800074a:	2b00      	cmp	r3, #0
 800074c:	d006      	beq.n	800075c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800074e:	4b39      	ldr	r3, [pc, #228]	; (8000834 <HAL_GPIO_Init+0x2b0>)
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	4938      	ldr	r1, [pc, #224]	; (8000834 <HAL_GPIO_Init+0x2b0>)
 8000754:	69bb      	ldr	r3, [r7, #24]
 8000756:	4313      	orrs	r3, r2
 8000758:	600b      	str	r3, [r1, #0]
 800075a:	e006      	b.n	800076a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800075c:	4b35      	ldr	r3, [pc, #212]	; (8000834 <HAL_GPIO_Init+0x2b0>)
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	69bb      	ldr	r3, [r7, #24]
 8000762:	43db      	mvns	r3, r3
 8000764:	4933      	ldr	r1, [pc, #204]	; (8000834 <HAL_GPIO_Init+0x2b0>)
 8000766:	4013      	ands	r3, r2
 8000768:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000772:	2b00      	cmp	r3, #0
 8000774:	d006      	beq.n	8000784 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000776:	4b2f      	ldr	r3, [pc, #188]	; (8000834 <HAL_GPIO_Init+0x2b0>)
 8000778:	685a      	ldr	r2, [r3, #4]
 800077a:	492e      	ldr	r1, [pc, #184]	; (8000834 <HAL_GPIO_Init+0x2b0>)
 800077c:	69bb      	ldr	r3, [r7, #24]
 800077e:	4313      	orrs	r3, r2
 8000780:	604b      	str	r3, [r1, #4]
 8000782:	e006      	b.n	8000792 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000784:	4b2b      	ldr	r3, [pc, #172]	; (8000834 <HAL_GPIO_Init+0x2b0>)
 8000786:	685a      	ldr	r2, [r3, #4]
 8000788:	69bb      	ldr	r3, [r7, #24]
 800078a:	43db      	mvns	r3, r3
 800078c:	4929      	ldr	r1, [pc, #164]	; (8000834 <HAL_GPIO_Init+0x2b0>)
 800078e:	4013      	ands	r3, r2
 8000790:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800079a:	2b00      	cmp	r3, #0
 800079c:	d006      	beq.n	80007ac <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800079e:	4b25      	ldr	r3, [pc, #148]	; (8000834 <HAL_GPIO_Init+0x2b0>)
 80007a0:	689a      	ldr	r2, [r3, #8]
 80007a2:	4924      	ldr	r1, [pc, #144]	; (8000834 <HAL_GPIO_Init+0x2b0>)
 80007a4:	69bb      	ldr	r3, [r7, #24]
 80007a6:	4313      	orrs	r3, r2
 80007a8:	608b      	str	r3, [r1, #8]
 80007aa:	e006      	b.n	80007ba <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80007ac:	4b21      	ldr	r3, [pc, #132]	; (8000834 <HAL_GPIO_Init+0x2b0>)
 80007ae:	689a      	ldr	r2, [r3, #8]
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	43db      	mvns	r3, r3
 80007b4:	491f      	ldr	r1, [pc, #124]	; (8000834 <HAL_GPIO_Init+0x2b0>)
 80007b6:	4013      	ands	r3, r2
 80007b8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d006      	beq.n	80007d4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80007c6:	4b1b      	ldr	r3, [pc, #108]	; (8000834 <HAL_GPIO_Init+0x2b0>)
 80007c8:	68da      	ldr	r2, [r3, #12]
 80007ca:	491a      	ldr	r1, [pc, #104]	; (8000834 <HAL_GPIO_Init+0x2b0>)
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	4313      	orrs	r3, r2
 80007d0:	60cb      	str	r3, [r1, #12]
 80007d2:	e006      	b.n	80007e2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80007d4:	4b17      	ldr	r3, [pc, #92]	; (8000834 <HAL_GPIO_Init+0x2b0>)
 80007d6:	68da      	ldr	r2, [r3, #12]
 80007d8:	69bb      	ldr	r3, [r7, #24]
 80007da:	43db      	mvns	r3, r3
 80007dc:	4915      	ldr	r1, [pc, #84]	; (8000834 <HAL_GPIO_Init+0x2b0>)
 80007de:	4013      	ands	r3, r2
 80007e0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80007e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e4:	3301      	adds	r3, #1
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ee:	fa22 f303 	lsr.w	r3, r2, r3
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	f47f aed0 	bne.w	8000598 <HAL_GPIO_Init+0x14>
  }
}
 80007f8:	bf00      	nop
 80007fa:	372c      	adds	r7, #44	; 0x2c
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	10210000 	.word	0x10210000
 8000808:	10110000 	.word	0x10110000
 800080c:	10120000 	.word	0x10120000
 8000810:	10310000 	.word	0x10310000
 8000814:	10320000 	.word	0x10320000
 8000818:	10220000 	.word	0x10220000
 800081c:	40021000 	.word	0x40021000
 8000820:	40010000 	.word	0x40010000
 8000824:	40010800 	.word	0x40010800
 8000828:	40010c00 	.word	0x40010c00
 800082c:	40011000 	.word	0x40011000
 8000830:	40011400 	.word	0x40011400
 8000834:	40010400 	.word	0x40010400

08000838 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	460b      	mov	r3, r1
 8000842:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800084a:	887a      	ldrh	r2, [r7, #2]
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	4013      	ands	r3, r2
 8000850:	041a      	lsls	r2, r3, #16
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	43d9      	mvns	r1, r3
 8000856:	887b      	ldrh	r3, [r7, #2]
 8000858:	400b      	ands	r3, r1
 800085a:	431a      	orrs	r2, r3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	611a      	str	r2, [r3, #16]
}
 8000860:	bf00      	nop
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
	...

0800086c <__libc_init_array>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	2500      	movs	r5, #0
 8000870:	4e0c      	ldr	r6, [pc, #48]	; (80008a4 <__libc_init_array+0x38>)
 8000872:	4c0d      	ldr	r4, [pc, #52]	; (80008a8 <__libc_init_array+0x3c>)
 8000874:	1ba4      	subs	r4, r4, r6
 8000876:	10a4      	asrs	r4, r4, #2
 8000878:	42a5      	cmp	r5, r4
 800087a:	d109      	bne.n	8000890 <__libc_init_array+0x24>
 800087c:	f000 f81a 	bl	80008b4 <_init>
 8000880:	2500      	movs	r5, #0
 8000882:	4e0a      	ldr	r6, [pc, #40]	; (80008ac <__libc_init_array+0x40>)
 8000884:	4c0a      	ldr	r4, [pc, #40]	; (80008b0 <__libc_init_array+0x44>)
 8000886:	1ba4      	subs	r4, r4, r6
 8000888:	10a4      	asrs	r4, r4, #2
 800088a:	42a5      	cmp	r5, r4
 800088c:	d105      	bne.n	800089a <__libc_init_array+0x2e>
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000894:	4798      	blx	r3
 8000896:	3501      	adds	r5, #1
 8000898:	e7ee      	b.n	8000878 <__libc_init_array+0xc>
 800089a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800089e:	4798      	blx	r3
 80008a0:	3501      	adds	r5, #1
 80008a2:	e7f2      	b.n	800088a <__libc_init_array+0x1e>
 80008a4:	080008cc 	.word	0x080008cc
 80008a8:	080008cc 	.word	0x080008cc
 80008ac:	080008cc 	.word	0x080008cc
 80008b0:	080008d0 	.word	0x080008d0

080008b4 <_init>:
 80008b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008b6:	bf00      	nop
 80008b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008ba:	bc08      	pop	{r3}
 80008bc:	469e      	mov	lr, r3
 80008be:	4770      	bx	lr

080008c0 <_fini>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	bf00      	nop
 80008c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008c6:	bc08      	pop	{r3}
 80008c8:	469e      	mov	lr, r3
 80008ca:	4770      	bx	lr
